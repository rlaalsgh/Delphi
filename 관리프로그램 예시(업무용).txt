unit CAAEP417;

interface

uses
    Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
    Dialogs, PBASFORM, ExtCtrls, DB, DBTables, GridsEh, DBGridEh, StdCtrls,
    Buttons, ComCtrls, Spin, AdvGlowButton, DBCtrls, DSComboBox, Grids, DBGrids;

type
    TCAAEF417 = class(TFBasForm)
        ds_caatb416: TDataSource;
        qr_caatb410: TQuery;
        qr_caatb416: TQuery;
        UpdateSQL1: TUpdateSQL;
        ds_caatb410: TDataSource;
        PageControl1: TPageControl;
        Tabsheet1: TTabSheet;
        Tabsheet2: TTabSheet;
        dt_ymd: TDateTimePicker;
        ed_etc: TEdit;
        ed_usrnm: TEdit;
        btnsearch: TAdvGlowButton;
        rg_gub: TRadioGroup;
        ed_sawcd: TEdit;
        ed_chpat: TEdit;
        ed_patcd: TEdit;
        top3_panel: TPanel;
        top1_panel: TPanel;
        top2_panel: TPanel;
        top4_panel: TPanel;
        top5_panel: TPanel;
        top6_panel: TPanel;
        Panel1: TPanel;
        ed_usr: TEdit;
        ed_sawcd2: TEdit;
        pn_sawnm2: TPanel;
        yy: TSpinEdit;
        ed_ser: TEdit;
        btn_pat: TAdvGlowButton;
        btn_chpat: TAdvGlowButton;
        btn_saw: TAdvGlowButton;
        qr_caatb416GUB_CD: TStringField;
        qr_caatb416NAM: TStringField;
        Panel4: TPanel;
        Panel11: TPanel;
        DBGridEh2: TDBGridEh;
        remark: TPanel;
        auth_req: TPanel;
        Panel5: TPanel;
        ch_dept: TPanel;
        req_dept: TPanel;
        panel: TPanel;
        Panel6: TPanel;
        Panel12: TPanel;
        req_type: TPanel;
        Panel13: TPanel;
        Panel16: TPanel;
        top_panel: TPanel;
        Panel15: TPanel;
        Panel17: TPanel;
        Panel19: TPanel;
        qr_caatb416YMD: TStringField;
        qr_caatb416SER_NO: TFloatField;
        qr_caatb416SEQ: TFloatField;
        qr_caatb416SAW_CD: TStringField;
        qr_caatb416PAT_CD: TStringField;
        qr_caatb416USR: TStringField;
        qr_caatb416PRODAT: TDateTimeField;
        qr_caatb416PAT_CD2: TStringField;
        Panel2: TPanel;
        pn_sawnm: TPanel;
        pn_chpatnm: TPanel;
        pn_patnm: TPanel;
        Panel14: TPanel;
        Panel20: TPanel;
        top_pat: TPanel;
        top_yy: TPanel;
        top: TPanel;
        Panel8: TPanel;
        Panel22: TPanel;
        btn_pat2: TAdvGlowButton;
        Panel23: TPanel;
        Panel24: TPanel;
        panel21: TPanel;
        DBGridEh1: TDBGridEh;
        DBGridEh3: TDBGridEh;
        qr_caatb901: TQuery;
        ds_caatb901: TDataSource;
        UpdateSQL2: TUpdateSQL;
        Panel26: TPanel;
        Panel18: TPanel;
        Panel25: TPanel;
        Panel10: TPanel;
        Panel27: TPanel;
        qr_caatb410YMD: TStringField;
        qr_caatb410PAT_CD: TStringField;
        qr_caatb410SAW_CD: TStringField;
        qr_caatb410GUBNM: TStringField;
        qr_caatb410SAWNAM: TStringField;
        qr_caatb410PATNAM: TStringField;
        qr_caatb410CANNM: TStringField;
        qr_caatb410SER_NO: TFloatField;
        qr_caatb410ETC: TStringField;
        qr_caatb410USRNM: TStringField;
        qr_caatb410GUBNAM: TStringField;
        qr_caatb410PATNAM2: TStringField;
        qr_caatb410SAWNAM2: TStringField;
        qr_caatb410STAT: TStringField;
        Panel29: TPanel;
        Panel3: TPanel;
        DBGridEh4: TDBGridEh;
        qr_Vempower: TQuery;
        ds_vempower: TDataSource;
        qr_VempowerPRG_CD: TStringField;
        qr_VempowerNAM: TStringField;
        qr_caatb901GUB_CD: TStringField;
        qr_caatb901NAM: TStringField;
        qr_caatb410SEQ: TFloatField;
        qr_caatb901ETC: TStringField;
        qr_caatb410STATCD: TStringField;
        Panel30: TPanel;
        SpeedButton1: TSpeedButton;
        SpeedButton2: TSpeedButton;
        PageControl2: TPageControl;
        TabSheet3: TTabSheet;
        TabSheet4: TTabSheet;
        qr_caatb410GJA_PRODAT: TDateTimeField;
        qr_caatb410PRODAT: TDateTimeField;
        qr_caatb410ETC1: TStringField;
        qr_caatb901DAMDANGJA: TStringField;
        New_top1: TPanel;
        New_top2: TPanel;
        Panel7: TPanel;
        Panel9: TPanel;
        Panel28: TPanel;
        Panel32: TPanel;
        Ed_PhoneNum: TEdit;
        Ed_EngName: TEdit;
        Ed_ExtNum: TEdit;
        Panel31: TPanel;
        Ed_OutlookID: TEdit;
        Panel33: TPanel;
        Label1: TLabel;

        // 화면 초기 처리
        procedure FormShow(Sender: Tobject);
        procedure FormActivate(Sender: TObject);

        // 신규, 저장, 삭제, 조회 버튼(화면 상단)
        procedure Donew(Sender: TObject); override;
        procedure Dosave(Sender: TObject); override;
        procedure Dodelete(Sender: TObject); override;
        procedure Doquery(Sender: TObject); override;

        // 요청유형, 변경부서, 검색, 권한요청자 버튼 클릭 이벤트
        procedure Rg_gubClick(Sender: TObject);
        procedure Btn_chpatclick(Sender: TObject);
        procedure BtnsearchClick(Sender: TObject);
        procedure Btn_sawClick(Sender: TObject);

        // 요청부서 조회 클릭 이벤트
        procedure Btn_patClick(Sender: TObject);
        procedure Btn_pat2Click(Sender: TObject);

        // 화면전환, 작성자,권한요청자,요청 부서 및 변경부서 코드 변경 이벤트
        procedure PageControl1Change(Sender: TObject);
        procedure Ed_usrChange(Sender: TObject);
        procedure Ed_sawcdChange(Sender: TObject);
        procedure Ed_patcdChange(Sender: TObject);
        procedure ed_sawcd2Change(Sender: TObject);
        procedure Ed_chpatChange(Sender: TObject);

        procedure DBGridEh3DblClick(Sender: TObject);
        procedure DBGridEh2DblClick(Sender: TObject);
        procedure yyChange(Sender: TObject);
        procedure SpeedButton1Click(Sender: TObject);
        procedure SpeedButton2Click(Sender: TObject);
        function isCheck(Sender: TObject; s: string): string;
        procedure Ed_EngNameChange(Sender: TObject);
        procedure Ed_PhoneNumChange(Sender: TObject);
        procedure Ed_OutlookIDChange(Sender: TObject);
        procedure Ed_ExtNumChange(Sender: TObject);
        //procedure TabControl2Change(Sender: TObject);

    private
        { Private declarations }
        pv_sql, pv_chk: string;
        pv_num, pv_ser, pv_seq: integer;

        // 저장버튼 프로시저 처리시 Ser_no, Seq 필드 값 증가
        procedure Max_ser;
        procedure Max_seq;
        procedure Prc_caatb416;
        procedure Prc_vempower;
        procedure Prc_caatb901;
        procedure prc_querySearch;
        procedure Prc_caatb410insert(gub_cd: string);
        procedure Prc_caatb416insert(const i_seq: integer; i_gub, i_pat_cd2,
            i_id, i_pw, i_phone, i_extention, i_engname: string);
    public
        { Public declarations }
    end;

var
    CAAEF417: TCAAEF417;

implementation
uses
    Ceri_dmP, CHPAP001, Patap921, CAAAP410, ppat_cd;

{$R *.dfm}

procedure TCAAEF417.Prc_caatb416;
begin

    if ed_ser.text = '' then
        Max_ser;

    with qr_caatb416 do
    begin
        close;
        ParamByName('YMD').AsString := formatdatetime('YYYYMMDD',
            dt_ymd.Date);
        ParamByName('PAT_CD').ASString := ed_patcd.Text;
        ParamByName('SAW_CD').AsString := ed_sawcd.Text;
        ParamByName('SER_NO').AsFloat := StrToFloat(ed_ser.text);
        Open;
    end;

end;

{
procedure TCAAEF417.Prc_caatb416insert();
var
    i: integer;
begin
    qr_caatb416.First;
    for I := 1 to qr_caatb416.RecordCount do
    begin
        with Ceri_dmf.qryupdate1 do
        begin
            close;
            Sql.Clear;
            Sql.Add('   insert into caatb416 (YMD,PAT_CD,SAW_CD,SER_NO,SEQ,  ');
            Sql.Add('                         GUB_CD,USR,PRODAT)             ');
            Sql.Add('                 values (:YMD,:PAT_CD,:SAW_CD ,:SER_NO, ');
            Sql.Add('                         :SEQ,:GUB_CD,:USR, SYSDATE)    ');
            ParamByName('YMD').AsString :=
                formatdatetime('YYYYMMDD', dt_ymd.Date);
            ParamByName('PAT_CD').AsString := ed_patcd.Text;
            ParamByName('SAW_CD').AsString := ed_sawcd.Text;
            ParamByName('SER_NO').AsFloat :=
                StrToFloat(ed_ser.Text);
            ParamByName('SEQ').AsInteger := i;
            ParamByName('GUB_CD').AsString :=
                qr_caatb416GUB_CD.Value;
            ParamByName('USR').AsString := g_Saw_cd;
            execsql;
        end;
        qr_caatb416.Next;
    end;
end;   }

procedure TCAAEF417.Prc_caatb416insert(const i_seq: integer; i_gub, i_pat_cd2,
    i_id, i_pw, i_phone, i_extention, i_engname: string);
begin
    with Ceri_dmf.qryupdate1 do
    begin
        close;
        Sql.Clear;
        Sql.Add('   insert into caatb416 (YMD,PAT_CD,SAW_CD,SER_NO,SEQ,  ');
        Sql.Add('                         GUB_CD,PAT_CD2, USR,PRODAT,ID,PW,PHONE,EXTENSION,ENGNAME)             ');
        Sql.Add('                 values (:YMD,:PAT_CD,:SAW_CD ,:SER_NO, ');
        Sql.Add('                         :SEQ,:GUB_CD,:PAT_CD2, :USR, SYSDATE, :ID, :PW, :PHONE, :EXTENSION, :ENGNAME)    ');
        ParamByName('YMD').AsString :=
            formatdatetime('YYYYMMDD', dt_ymd.Date);
        ParamByName('PAT_CD').AsString := ed_patcd.Text;
        ParamByName('SAW_CD').AsString := ed_sawcd.Text;
        ParamByName('SER_NO').AsFloat :=
            StrToFloat(ed_ser.Text);
        ParamByName('SEQ').AsInteger := i_seq;
        ParamByName('GUB_CD').AsString := i_gub;
        ParamByName('USR').AsString := g_Saw_cd;
        ParamByName('PAT_CD2').AsString := i_pat_cd2;
        ParamByName('ID').AsString := i_id;
        ParamByName('PW').AsString := i_pw;
        ParamByName('PHONE').AsString := i_phone;
        ParamByName('EXTENSION').AsString := i_extention;
        ParamByName('ENGNAME').AsString := i_engname;

        execsql;
    end;
end;

procedure TCAAEF417.Prc_caatb901;
begin
    with qr_caatb901 do
    begin
        close;
        ParambyName('SAW_CD').AsString := ed_sawcd.Text;
        Open;
    end;
end;

procedure TCAAEF417.prc_querySearch;
begin
    // btn_pat2, ed_patcd2 컴포넌트 버튼 활성화 및 수정가능 ( 경영정보팀)
    with Ceri_dmf.qrySearch do
    begin
        close;
        Sql.Clear;
        Sql.Add('  Select SOSPAT_CD                 '); // 부서코드
        Sql.Add('    From caatb904                  ');
        Sql.Add('   where SAW_CD=:SAW_CD            ');
        ParamByName('SAW_CD').AsString := g_saw_cd;
        open;
        if fieldbyname('SOSPAT_CD').AsString = '70000' then // 경영정보팀
        begin
            btn_pat2.Visible := true;
            ed_sawcd2.ReadOnly := false;
        end
        else
        begin
            btn_pat2.Visible := false;
            ed_sawcd2.enabled := false;
        end;
    end;
end;

procedure TCAAEF417.Prc_vempower;
begin
    with qr_Vempower do
    begin
        close;
        ParambyName('SAW_CD').AsString := ed_sawcd.Text;
        Open;
    end;
end;

procedure TCAAEF417.Prc_caatb410insert(gub_cd: string);
begin
    with Ceri_dmf.qryUpdate do
    begin
        close;
        Sql.Clear;
        Sql.Add('   insert into caatb410 (YMD,PAT_CD,SAW_CD,SER_NO,CHK_YN,     ');
        Sql.Add('                         GUB_CD,ETC,USR,PRODAT)               ');
        Sql.Add('                 values (:YMD,:PAT_CD,:SAW_CD,:SER_NO,''0'',  ');
        Sql.Add('                         :GUB_CD,:ETC,:USR,SYSDATE)           ');
        ParamByName('YMD').AsString :=
            formatdatetime('YYYYMMDD', dt_ymd.Date);
        ParamByName('PAT_CD').AsString := ed_patcd.Text;
        ParamByName('SAW_CD').AsString := ed_sawcd.Text;
        ParamByName('SER_NO').AsFloat :=
            StrToFloat(ed_ser.Text);
        ParamByName('GUB_CD').AsString := gub_cd;
        ParamByName('ETC').AsString := ed_etc.Text;
        ParamByName('USR').AsString := g_Saw_cd;
        execsql;
    end;
end;

procedure TCAAEF417.FormActivate(Sender: TObject);
begin
    inherited;
    EnableBtns([btnNew, btnSave]);
end;

procedure TCAAEF417.FormShow(Sender: TObject);

begin
    inherited;

    pv_sql := qr_caatb901.SQL.Text;
    dt_ymd.Format := 'yyyy''년'' MM''월'' dd''일''';
    dt_ymd.Date := g_sysdate;
    dt_ymd.Enabled := false;
    yy.Text := Copy(DateToStr(g_sysdate), 1, 4);

    ed_usr.Text := g_saw_cd;
    ed_usrnm.Text := g_sawnam;

    ed_patcd.Text := g_sospat_cd; // 등록
    ed_sawcd2.Text := g_saw_cd; // 현황
    ed_sawcd.Text := g_saw_cd;

    ed_usr.ReadOnly := true;
    ed_usrnm.ReadOnly := true;

    DBGridEh3.Hint := '더블 클릭하여 프로그램 권한 추가';
    DBGridEh2.Hint := '더블 클릭하여 프로그램 권한 삭제';
    DBGridEh4.Hint := '현재 권한요청자가 가지고 있는 권한';

    pv_num := 0;

    PageControl1.ActivePageIndex := 0;
    PageControl2.ActivePageIndex := 0;
    rg_gub.ItemIndex := 1;

    // 로그인 부서 경영정보팀인 경우 부서 변경 및 수정 가능.
    prc_querySearch;

    // 권한추가 프로그램리스트 OPEN
    Prc_caatb901;

    qr_caatb416.close;
    qr_caatb416.open;
end;

procedure TCAAEF417.Donew(Sender: TObject);
begin
    inherited;
    dt_ymd.Enabled := true;
    ed_patcd.Readonly := false;
    ed_chpat.ReadOnly := false;
    ed_sawcd.ReadOnly := false;
    btn_pat.Enabled := true;
    btn_saw.Enabled := true;

    ed_patcd.Clear;
    ed_sawcd.Clear;
    ed_ser.Clear;

    Ed_OutlookID.Clear;
    Ed_EngName.Clear;
    Ed_ExtNum.Clear;
    Ed_PhoneNum.Clear;

    Prc_caatb416; // Dbgrid 초기화

    dt_ymd.Date := g_sysdate;
    yy.Text := Copy(DateToStr(g_sysdate), 1, 4);

    ed_usr.Text := g_saw_cd;
    ed_usrnm.Text := g_sawnam;
    ed_patcd.Text := g_sospat_cd; // 등록
    ed_sawcd2.Text := g_saw_cd; // 현황
    ed_sawcd.Text := g_saw_cd;

    ed_chpat.Clear;
    ed_etc.Clear;
    rg_gub.ItemIndex := 1;

    pv_num := 0;
    pv_chk := '';

    Prc_caatb901;

    //TabControl2Change(nil);
end;

procedure TCAAEF417.Dosave(Sender: TObject);
var
    i: integer;
    wk_gub: string;
    phNUM, extNUM, OutlookID, OutlookPW: string;

begin
    inherited;
    if rg_gub.ItemIndex in [0, 1, 2] then
    begin
        if qr_caatb416.Active = false then
            exit;
    end;

    if (rg_gub.ItemIndex in [0, 1, 2]) and (qr_caatb416GUB_CD.value = '') then
    begin
        showmessage('요청 프로그램을 선택해주세요.');
        exit;
    end;

    if (length(pn_patnm.Caption) = 0) then
    begin
        showmessage('요청부서를 입력해주세요. ');
        ed_patcd.SetFocus;
        exit;
    end;

    if (length(pn_sawnm.Caption) = 0) then
    BEGIN
        showmessage('권한요청자를 입력해주세요. ');
        ed_sawcd.SetFocus;
        exit;
    END;

    if rg_gub.ItemIndex <> 0 then
    begin
        with ceri_dmf.qrySearch do
        begin
            close;
            Sql.Clear;
            Sql.Add('   SELECT SAWNAM          ');
            Sql.Add('     FROM caatb904        ');
            Sql.Add('    WHERE saw_cd=:saw_cd  ');
            ParamByName('SAW_CD').AsString := trim(ed_Sawcd.Text);
            open;
            if eof then
            begin
                showmessage('신규입사일 경우 요청 유형을 ''신규입사''로 선택해주세요');
                exit;
            end;
        end;
    end
    else if rg_gub.ItemIndex = 0 then
    begin
        with ceri_dmf.qrySearch do
        begin
            close;
            Sql.Clear;
            Sql.Add('   SELECT SAWNAM          ');
            Sql.Add('     FROM caatb904        ');
            Sql.Add('    WHERE saw_cd=:saw_cd  ');
            ParamByName('SAW_CD').AsString := trim(ed_Sawcd.Text);
            open;
            if not eof then
            begin
                showmessage('요청 유형을 권한추가로 선택해주세요.');
                exit;
            end;
        end;
    end;

    if (rg_gub.ItemIndex = 3) and (length(ed_chpat.Text) = 0) then
    begin
        showmessage('변경부서를 정확하게 입력해 주세요');
        exit;
    end;

    if (rg_gub.ItemIndex = 4) then
    begin
        if (length(Ed_OutlookID.Text) = 0) then
        begin
            showmessage('OutlookID 를 입력해주세요.');
            Ed_OutlookID.SetFocus;
            exit;
        end;
        if (length(Ed_EngName.Text) = 0) then
        begin
            showmessage('영문명을 입력해주세요.');
            Ed_EngName.SetFocus;
            exit;
        end;
        if (length(Ed_PhoneNum.Text) = 0) then
        begin
            showmessage('핸드폰번호를 입력해주세요.');
            Ed_PhoneNum.SetFocus;
            exit;
        end;
    end;

    if length(ed_etc.Text) = 0 then
    begin
        showmessage('비고를 입력해주세요.');
        exit;
    end;

    // 요청 유형 저장.
    wk_gub := IntToStr(rg_gub.ItemIndex);
    try
        if MessageDlg('저장하시겠습니까?', mtInformation, mbOKCancel, 0) = mrOK then

        begin
            if Pv_chk <> 'M' then
            begin
                Max_ser;
                prc_caatb410insert(wk_gub);
            end
            else if pv_chk = 'M' then
            begin

                with Ceri_dmf.qryUpdate do
                begin
                    close;
                    Sql.Clear;
                    Sql.Add('    update caatb410 set  ETC=:ETC,        ');
                    Sql.Add('                         USR=:USR,        ');
                    Sql.Add('                         PRODAT=SYSDATE,  ');
                    Sql.Add('                         GUB_CD=:GUB_CD   ');
                    // 신규입사, 권한추가/취소, 부서이동
                    Sql.Add('                   where YMD=:YMD         ');
                    Sql.Add('                     and PAT_CD=:PAT_CD   ');
                    Sql.Add('                     and SAW_CD=:SAW_CD   ');
                    Sql.Add('                     and SER_NO=:SER_NO   ');
                    ParamByName('ETC').AsString := ed_etc.Text;
                    ParamByNAme('USR').AsString := g_saw_cd;
                    ParamByName('GUB_CD').AsString := wk_gub;
                    ParamByName('YMD').AsString := formatdatetime('YYYYMMDD',
                        dt_ymd.Date);
                    ParamByName('PAT_CD').AsString := ed_patcd.Text;
                    ParamByName('SAW_CD').AsString := ed_Sawcd.Text;
                    ParamByName('SER_NO').AsFloat := StrToFloat(ed_ser.Text);
                    execsql;
                end;
                with Ceri_dmf.qryUpdate do
                begin
                    close;
                    sql.Clear;
                    Sql.Add('   delete from caatb416        ');
                    Sql.Add('         where YMD=:YMD        ');
                    Sql.Add('           and PAT_CD=:PAT_CD  ');
                    Sql.Add('           and SAW_CD=:SAW_CD  ');
                    Sql.Add('           and SER_NO=:SER_NO  ');
                    ParamByName('YMD').AsString := formatdatetime('YYYYMMDD',
                        dt_Ymd.Date);
                    ParamByName('PAT_CD').AsString := ed_patcd.Text;
                    ParamByName('SAW_CD').AsString := ed_sawcd.text;
                    ParamByName('SER_NO').AsFloat := StrToFloat(ed_ser.Text);
                    execsql;
                end;
            end;

            if rg_gub.ItemIndex = 3 then
            begin
                Prc_caatb416insert(1, 'AA', ed_chpat.Text, '', '', '', '', '');
                // 부서변경프로그램 'AA'
            end
            else
            begin
                if rg_gub.ItemIndex = 4 then
                begin
                    OutlookID := Ed_OutlookID.Text + '@globalcas.com';
                    OutlookPW := Ed_OutlookID.Text + '@@';
                    extNUM := Ed_ExtNum.Text;
                    phNUM := Ed_PhoneNum.Text;

                    if copy(extNUM, length(extNUM) - 3, 1) = '1' then
                    begin
                        extNUM := copy(extNUM, 1, 3) + '-' + copy(extNUM, 4, 3)
                            +
                            '-' + copy(extNUM, 7, 4);
                    end
                    else
                    begin
                        extNUM := copy(extNUM, 1, 2) + '-' + copy(extNUM, 3, 4)
                            +
                            '-' + copy(extNUM, 7, 4);
                    end;

                    phNUM := copy(phNUM, 1, 3) + '-' + copy(phNUM, 4, 4) + '-'
                        + copy(phNUM, 8, 4);

                    Prc_caatb416insert(1, 'AB', '',
                        OutlookID, OutlookPW, phNUM,
                        extNUM, Ed_EngName.Text);
                    // 아웃룩 계정 신청
                end
                else
                begin
                    with qr_caatb416 do
                    begin
                        FIRST;
                        for I := 1 to RECORDCOUNT do
                        begin
                            Prc_caatb416insert(I, qr_caatb416GUB_CD.value, '',
                                '', '', '', '', '');
                            NEXT;
                        end;
                    end;
                end;

            end;

        end;
    except
        on Emsg: Exception do
        begin
            CERI_DMF.Gp_RollBackStartTransaction;
            MessageDlg(Emsg.Message + #13 + CERI_DMF.Gf_Message('002'), mtError,
                [mbOK], 0);
            exit
        end;
    end;
    CERI_DMF.Gp_CommitStartTransaction;
    donew(nil);
end;

procedure TCAAEF417.DBGridEh2DblClick(Sender: TObject);
begin
    inherited;
    if qr_caatb416GUB_CD.Value = '' then
    begin
        ShowMessage('잘못된 데이터 입니다.');
        exit;
    end;
    qr_caatb901.insert;
    qr_caatb901GUB_CD.Value := qr_caatb416gub_cd.Value;
    qr_caatb901NAM.Value := qr_caatb416NAM.Value;
    with Ceri_dmf.qryUniSearch do
    begin
        close;
        sql.Clear;
        Sql.Add('  SELECT etc                 ');
        Sql.Add('    FROM caatb901              ');
        Sql.Add('   WHERE GUB_CD =:gub_cd       ');
        Sql.Add('     and DAE_CD=''910''        ');
        ParamByName('GUB_CD').AsString := qr_caatb416GUB_CD.value;
        open;
        qr_caatb901ETC.Value := FieldByName('etc').AsAnsiString;
    end;
    with Ceri_dmf.qryUniSearch do
    begin
        close;
        sql.Clear;
        Sql.Add('  SELECT prg_id, WM_CONCAT(SAWNAM) damdangja    ');
        Sql.Add('    FROM (SELECT A.PRG_ID, A.SAW_CD, B.SAWNAM ');
        Sql.Add('          FROM CAATB414 A, CAATB904 B         ');
        Sql.Add('          WHERE A.SAW_CD = B.SAW_CD           ');
        Sql.Add('          AND   A.PRG_ID =:PRG_ID)            ');
        Sql.Add('   GROUP BY prg_id                            ');
        ParamByName('PRG_ID').AsString := qr_caatb416GUB_CD.value;
        open;
        qr_caatb901DAMDANGJA.Text := FieldByName('damdangja').AsString;
    end;
    qr_caatb901.Post;

    qr_caatb416.Delete;

end;

procedure TCAAEF417.DBGridEh3DblClick(Sender: TObject);
var
    i: integer;
begin
    inherited;
    if qr_caatb901GUB_CD.Value = '' then
    begin
        ShowMessage('잘못된 데이터 입니다.');
        exit;
    end;
    if length(ed_patcd.Text) = 0 then
    begin
        showmessage('요청부서를 먼저 입력해주세요');
        exit;
    end;
    if length(ed_sawcd.Text) = 0 then
    begin
        showmessage('권한요청자를 입력해주세요');
        exit;
    end;

    qr_caatb416.First;
    for i := 1 to qr_caatb416.RecordCount do
    begin
        if qr_caatb416GUB_CD.Value = qr_caatb901GUB_CD.Value then
        begin
            showmessage('이미 등록된 프로그램입니다.');
            exit;
        end;
        qr_caatb416.Next;
    end;

    // 선택한 프로그램(프로그램 권한) 오른쪽 Dbgrid추가 및 왼쪽 Dbgrid에서 삭제
    qr_caatb416.Insert;
    qr_caatb416GUB_CD.Value := qr_caatb901GUB_CD.Value;
    qr_caatb416NAM.Value := qr_caatb901NAM.Value;
    qr_caatb416.Post;
    qr_caatb901.Delete;

end;

procedure TCAAEF417.Dodelete(Sender: TObject);
begin
    inherited;
    if qr_caatb410STATCD.Value = '1' then
    begin
        showmessage('완료된 요청은 접수취소 할 수 없습니다.');
        exit;
    end
    else if qr_caatb410STATCD.value = '2' then
    begin
        showmessage('이미 반려 처리된 요청입니다.');
        exit;
    end;

    if Pagecontrol1.ActivePageIndex = 1 then
    begin
        if MessageDlg('선택하신 요청을 취소하시겠습니까?', mtConfirmation, mbOKCancel, 0) = mrOK then
        begin
            try
                with CERI_DMF.qryUpdate do
                begin
                    close;
                    Sql.Clear;
                    Sql.Add('   update caatb416 set CAN_YN=''1''    ');
                    Sql.Add('                 where YMD=:YMD        ');
                    Sql.Add('                   and PAT_CD=:PAT_CD  ');
                    Sql.Add('                   and SAW_CD=:SAW_CD  ');
                    Sql.Add('                   and SER_NO=:SER_NO  ');
                    Sql.Add('                   and SEQ =:SEQ       ');
                    ParamByName('YMD').AsString := qr_Caatb410YMD.Value;
                    PAramByName('PAT_CD').AsString :=
                        string(qr_caatb410PAT_CD.Value);
                    ParamByName('SAW_CD').AsString :=
                        string(qr_Caatb410SAW_CD.Value);
                    ParamByName('SER_NO').AsFloat := qr_caatb410SER_NO.Value;
                    ParamByName('SEQ').AsFloat := qr_caatb410SEQ.value;
                    execsql;
                end;
            except
                on Emsg: Exception do
                begin
                    Ceri_dmf.Gp_RollbackStartTransaction;
                    MessageDlg(Emsg.Message + #13 + Ceri_DMF.Gf_Message('002'),
                        mtError, [mbOK], 0);
                    Exit;
                end;
            end;
            Ceri_dmf.Gp_CommitStartTransaction;
            doquery(nil);
        end;
    end;
end;

procedure TCAAEF417.Doquery(Sender: TObject);
begin
    inherited;
    with qr_caatb410 do
    begin
        close;
        ParamByName('YY').asString := YY.Text;
        ParamByName('USR').AsString := ed_sawcd2.Text;
        if (g_sospat_cd = '70000') then
        begin
            ParamByName('USR').asString := '%';
        end;
        Open;
    end;
end;

procedure TCAAEF417.btn_chpatclick(Sender: TObject);
begin
    inherited;
    try
        Fpat_cd := TFpat_cd.Create(self);
        Fpat_cd.gv_df_patcd := '';
        if Fpat_cd.ShowModal = mrOK then
        begin
            ed_chpat.text := Fpat_cd.gv_patcd; {Gloval variable 넘겨받기}
        end;
    finally
        Fpat_cd.FreeOnRelease;
        Fpat_cd := nil;
    end;
end;

procedure TCAAEF417.btn_pat2Click(Sender: TObject);
begin
    inherited;
    try

        frmCHPAP001 := TfrmCHPAP001.Create(Self);

        if frmCHPAP001.showmodal = mrOK then
            ed_sawcd2.text := frmCHPAP001.qr_sql.Fields[1].text;
    finally
        frmCHPAP001.Free;
    end;
end;

procedure TCAAEF417.btn_patclick(Sender: TObject);
begin
    inherited;
    try
        Fpat_cd := TFpat_cd.Create(self);
        Fpat_cd.gv_df_patcd := '';
        if Fpat_cd.ShowModal = mrOK then
        begin
            ed_patcd.text := Fpat_cd.gv_patcd; {Gloval variable 넘겨받기}
        end;
    finally
        Fpat_cd.FreeOnRelease;
        Fpat_cd := nil;
    end;
end;

procedure TCAAEF417.btn_sawClick(Sender: TObject);
begin
    inherited;
    try

        frmCHPAP001 := TfrmCHPAP001.Create(Self);

        if frmCHPAP001.showmodal = mrOK then
            ed_sawcd.text := frmCHPAP001.qr_sql.Fields[1].text;
    finally
        frmCHPAP001.Free;
    end;
end;

procedure TCAAEF417.btnsearchClick(Sender: TObject);
begin
    inherited;
    CAAAF410 := TCAAAF410.Create(Self);
    try
        CAAAF410.ed_patcd.Text := g_sospat_cd;
        if CAAAF410.ShowModal = mrOk then
        begin
            ed_patcd.Text := CAAAF410.gv_patcd;
            ed_usr.Text := CAAAF410.gv_usr;
            ed_sawcd.Text := CAAAF410.gv_sawcd;
            ed_etc.Text := CAAAF410.gv_etc;
            ed_ser.Text := FloatToStr(CAAAF410.gv_serno);
            dt_ymd.date := StrToDate(slashymd(CAAAF410.gv_ymd));

            pv_chk := 'M'; // 검색 했을때 알파벳 M을 넣어준다.

            dt_ymd.Enabled := false;
            ed_patcd.Readonly := true;
            ed_sawcd.ReadOnly := true;
            btn_pat.Enabled := false;
            btn_saw.Enabled := false;
            rg_gub.ItemIndex := StrToInt(CAAAF410.gv_gubcd);

            prc_caatb416;
            qr_caatb416.First;
            while not qr_caatb416.eof do
            begin
                qr_caatb901.First;
                while not qr_caatb901.Eof do
                begin
                    if ansiCompareStr(qr_caatb901GUB_CD.AsString,
                        qr_caatb416GUB_CD.AsString) = 0 then
                    begin
                        qr_caatb901.Delete;
                        break;
                    end;
                    qr_caatb901.Next;
                end;
                qr_caatb416.Next;
            end;

            if rg_gub.ItemIndex = 3 then
            begin
                ed_chpat.Text := qr_caatb416PAT_CD2.AsString;
            end;

        end;

    finally
        CAAAF410.Free;
    end;
end;

procedure TCAAEF417.ed_chpatChange(Sender: TObject);
begin
    inherited;
    if length(ed_chpat.Text) = 5 then
    begin

        with Ceri_dmf.qrySearch do
        begin
            Close;
            SQL.Clear;
            SQL.Add('select * From Caatb911 ');
            SQL.Add('where pat_cd = :pat_cd ');
            ParamByName('pat_cd').AsString := ed_chpat.Text;
            open;
            pn_chpatnm.Caption := Fieldbyname('patnam').AsString;
        end;
    end

end;

function TCAAEF417.isCheck(SENDER: TObject; s: string): string;
var
    i: integer;
begin
    if Length(Trim(s)) = 0 then
    begin
        exit;
    end;
    s := Trim(s);
    if Sender = Ed_EngName then
    begin
        for i := 1 to Length(s) do
        begin
            if (not CharInSet(s[i], ['A'..'Z'])) and (not CharInSet(s[i], [' '])) then
            begin
                ShowMessage('영문이름을 바르게 입력하세요.');
                Ed_EngName.setfocus;
                exit;
            end;
        end;
        Ed_EngName.Text := s;
    end
    else if Sender = Ed_PhoneNum then
    begin
        for i := 1 to Length(s) do
        begin
            if (not CharInSet(s[i], ['0'..'9'])) and (not CharInSet(s[i], [' '])) then
            begin
                ShowMessage('핸드폰번호를 바르게 입력하세요. ex) 010 1234 5678');
                Ed_PhoneNum.setfocus;
                exit;
            end;
        end;
        s := StringReplace(s, ' ', '', [rfReplaceAll]);
        Ed_PhoneNum.Text := s;
    end
    else if Sender = Ed_OutlookID then
    begin
        for i := 1 to Length(s) do
        begin
            if (not CharInSet(s[i], ['0'..'9'])) and (not CharInSet(s[i],
                ['a'..'z'])) and (not CharInSet(s[i], [' '])) then
            begin
                ShowMessage('ID는영문/숫자만 입력하세요.');
                Ed_OutlookID.setfocus;
                exit;
            end;
        end;
        s := StringReplace(s, ' ', '', [rfReplaceAll]);
        Ed_OutlookID.Text := s;
    end
    else if Sender = Ed_ExtNum then
    begin
        for i := 1 to Length(s) do
        begin
            if not CharInSet(s[i], ['0'..'9']) and (not CharInSet(s[i], [' '])) then
            begin
                ShowMessage('내선번호는 숫자만 입력하세요.');
                Ed_ExtNum.setfocus;
                exit;
            end;
        end;
        s := StringReplace(s, ' ', '', [rfReplaceAll]);
        Ed_ExtNum.Text := s;
    end;
end;

procedure TCAAEF417.Ed_PhoneNumChange(Sender: TObject);
begin
    inherited;
    isCheck(Ed_PhoneNum, Ed_PhoneNum.Text);
end;

procedure TCAAEF417.Ed_EngNameChange(Sender: TObject);
begin
    isCheck(Sender, Ed_EngName.Text);
end;

procedure TCAAEF417.Ed_ExtNumChange(Sender: TObject);
begin
    inherited;
    isCheck(Sender, Ed_ExtNum.Text);
end;

procedure TCAAEF417.Ed_OutlookIDChange(Sender: TObject);
begin
    inherited;
    isCheck(Sender, ed_outlookID.Text);
end;

procedure TCAAEF417.ed_sawcd2Change(Sender: TObject);
begin
    inherited;
    with Ceri_dmf.QR_temp do
    begin
        close;
        Sql.Clear;
        Sql.Add('SELECT sawnam,sospat_cd     ');
        Sql.Add('  FROM caatb904             ');
        Sql.Add(' WHERE saw_cd = :saw_cd     ');
        ParamByName('saw_cd').AsString := ed_sawcd2.Text;
        open;
        pn_sawnm2.Caption := FieldByName('sawnam').AsString;
    end;
end;

procedure TCAAEF417.ed_patcdChange(Sender: TObject);
begin
    inherited;

    if (length(ed_patcd.Text) = 5) then
    begin
        with Ceri_dmf.qrySearch do
        begin
            Close;
            SQL.Clear;
            SQL.Add('select * From Caatb911 ');
            SQL.Add('where pat_cd = :pat_cd ');
            ParamByName('pat_cd').AsString := ed_patcd.Text;
            open;
            pn_patnm.Caption := Fieldbyname('patnam').AsString;
        end;
    end
    else
        pn_patnm.Caption := '';

end;

procedure TCAAEF417.ed_sawcdChange(Sender: TObject);
var
    lsdepcd: string;
    lsorcd: string;
begin
    inherited;

    if (length(ed_sawcd.text) = 6) then
    begin
        if rg_gub.ItemIndex = 0 then
        begin
            with Ceri_dmf.QR_temp do
            begin
                close;
                Sql.Clear;
                Sql.Add(' SELECT empnm,depcd         ');
                Sql.Add('   FROM chptb201            ');
                Sql.Add('  WHERE empno = :saw_cd     ');
                sql.add('    and retirymd is null    ');
                ParamByName('saw_cd').AsString := ed_sawcd.Text;
                open;
                if not eof then
                begin
                    pn_sawnm.Caption := FieldByName('empnm').AsString;
                    lsdepcd := fieldbyname('depcd').AsString;

                    with CERI_DMF.qr_temp1 do
                    begin
                        close;
                        Sql.Clear;
                        Sql.Add('SELECT pat_cd                        ');
                        Sql.Add('  FROM caatb911                      ');
                        Sql.Add(' WHERE inspat_cd = :INSPAT_CD        ');
                        sql.add('   AND nvl(use_yn,''N'') = :USE_YN   ');
                        sql.Add('   AND prodat is not null            ');
                        sql.add(' ORDER BY prodat desc                ');
                        ParamByName('INSPAT_CD').AsString := lsdepcd;
                        ParamByName('USE_YN').asstring := 'Y';
                        open;
                        ed_patcd.Text := FieldByName('pat_cd').AsString;
                    end;

                    if ed_patcd.Text = '' then // 인사 테이블에서 부서조회 안됐을 경우.
                    begin

                        with Ceri_dmf.QR_temp do
                        begin
                            close;
                            sql.Clear;
                            sql.add('    SELECT orcd            ');
                            sql.add('      FROM chptb104        ');
                            sql.add('     WHERE depcd = :DEPCD  ');
                            ParamByName('DEPCD').AsString := lsdepcd;
                            open;
                            lsorcd := FieldByName('orcd').AsString; // 인사 부서의 팀장 사원코드
                        end;
                        with Ceri_dmf.QR_temp do
                        begin
                            close;
                            sql.Clear;
                            sql.add('    SELECT sospat_cd        ');
                            sql.add('      FROM caatb904         ');
                            sql.add('     WHERE saw_cd = :SAWCD ');
                            ParamByName('SAWCD').AsString := lsorcd; // 팀장의 부서코드(5자리)
                            open;
                            ed_patcd.Text := FieldByName('sospat_cd').AsString;
                        end;
                    end;
                end
                else
                begin
                    ShowMessage('등록된 사번이 아닙니다.');
                    exit;
                end;
            end;
        end
        else
        begin
            with Ceri_dmf.QR_temp do
            begin
                close;
                sql.Clear;
                sql.add('    SELECT sawnam,sospat_cd        ');
                sql.add('      FROM caatb904         ');
                sql.add('     WHERE saw_cd = :SAWCD ');
                ParamByName('SAWCD').AsString := ed_sawcd.Text; // 팀장의 부서코드(5자리)
                open;
                if not eof then
                begin
                    ed_patcd.Text := FieldByName('sospat_cd').AsString;
                    pn_sawnm.Caption := FieldByName('sawnam').AsString;
                end;
            end;
        end;

    end
    else
        pn_sawnm.Caption := '';

    Prc_vempower;
    Prc_caatb901;
end;

procedure TCAAEF417.ed_usrChange(Sender: TObject);
begin
    inherited;
    if Length(ed_usr.Text) = 6 then
    begin
        with Ceri_dmf.QR_temp do
        begin
            close;
            Sql.Clear;
            Sql.Add(' SELECT EMPNO,EMPNM');
            Sql.Add(' FROM chptb201');
            Sql.Add(' WHERE EMPNO=:EMPNO    ');
            ParamByName('EMPNO').AsString := ed_usr.Text;
            open;
            ed_usrnm.text := FieldByName('EMPNM').AsString;
        end;
    end
end;

procedure TCAAEF417.max_seq;
begin
    with CERI_DMF.QrySearch do
    begin
        close;
        Sql.Clear;
        Sql.Add('   Select max(seq) + 1 seq      ');
        Sql.Add('     from caatb411              ');
        Sql.Add('    where YMD=:YMD              ');
        Sql.Add('      and PAT_CD=:PAT_CD        ');
        Sql.Add('      and SAW_CD=:SAW_CD        ');
        Sql.Add('      and SER_NO=:SER_NO        ');
        ParamByName('YMD').AsString := formatdatetime('YYYYMMDD', dt_ymd.Date);
        ParamByName('PAT_CD').AsString := ed_patcd.Text;
        ParamByName('SAW_CD').AsString := ed_sawcd.Text;
        ParamByName('SER_NO').Asfloat := strToFloat(ed_ser.Text);
        open;
        if fieldbyname('seq').AsInteger = 0 then
            pv_seq := 1
        else
            pv_seq := fieldbyname('seq').AsInteger;
    end;
end;

procedure TCAAEF417.max_ser;
begin
    with CERI_DMF.QrySearch do
    begin
        close;
        Sql.Clear;
        Sql.Add('   Select max(ser_no) + 1 ser   ');
        Sql.Add('     from caatb410              ');
        Sql.Add('    where YMD=:YMD              ');
        Sql.Add('      and PAT_CD=:PAT_CD        ');
        Sql.Add('      and SAW_CD=:SAW_CD        ');
        ParamByName('YMD').AsString := formatdatetime('YYYYMMDD', dt_ymd.Date);
        ParamByName('PAT_CD').AsString := ed_patcd.Text;
        ParamByName('SAW_CD').AsString := ed_sawcd.Text;
        open;
        if fieldbyname('ser').AsInteger = 0 then
            pv_ser := 1
        else
            pv_ser := fieldbyname('ser').AsInteger;
    end;
    ed_ser.Text := IntToStr(pv_ser);
end;

procedure TCAAEF417.PageControl1Change(Sender: TObject);
begin
    inherited;
    if PageControl1.ActivePageIndex = 0 then
    begin
        EnableBtns([btnNew, btnSave]);
    end
    else if PageControl1.ActivePageIndex = 1 then
    begin
        EnableBtns([btnDelete, btnQuery]);
        doquery(nil);

    end;
end;

procedure TCAAEF417.rg_gubClick(Sender: TObject);
var
    v_query: string;
begin
    inherited;
    if (rg_gub.ItemIndex = 0) then
    begin
        ed_patcd.text := '';
        ed_sawcd.text := '';
    end
    else
    begin
        ed_patcd.text := g_sospat_cd;
        ed_sawcd.text := g_saw_cd;
    end;

    if rg_gub.ItemIndex = 3 then
    begin
        New_top1.Visible := false;
        New_top2.Visible := false;
        top5_panel.Visible := true; // 권한요청자
        top3_panel.Visible := true; // 요청부서
        top4_panel.Visible := true; // 변경부서

        panel29.Visible := false; // 권한목록

        ed_etc.Text := '부서변경';

    end
    else if rg_gub.ItemIndex = 4 then
    begin
        new_top1.Visible := true;
        new_top2.Visible := true;

        top4_panel.Visible := false; // 변경부서
        panel29.Visible := false; // 권한목록
        ed_etc.Text := 'Outlook 계정등록';

    end
    else
    begin
        if rg_gub.ItemIndex = 2 then
        begin
            qr_caatb901.Close;
            qr_caatb901.SQL.Clear;
            qr_caatb901.SQL.Add('SELECT a.gub_cd, a.NAM, a.etc, substr(WM_CONCAT(b.sawnam),1,60) damdangja  ');
            qr_caatb901.SQL.Add('  FROM caatb901 a,(SELECT A.PRG_ID, A.SAW_CD, B.SAWNAM                     ');
            qr_caatb901.SQL.Add('                     FROM CAATB414 A, CAATB904 B                           ');
            qr_caatb901.SQL.Add('                 	 WHERE A.SAW_CD = B.SAW_CD) b                           ');
            qr_caatb901.SQL.Add(' WHERE a.gub_cd = b.prg_id(+)                                              ');
            qr_caatb901.SQL.Add('   AND exists(SELECT b.NAM                                                 ');
            qr_caatb901.SQL.Add('                FROM V_EMPOWER b                                           ');
            qr_caatb901.SQL.Add('               WHERE b.EMPNO =:SAW_CD                                      ');
            qr_caatb901.SQL.Add('                 AND b.prg_cd = a.gub_cd)                                  ');
            qr_caatb901.SQL.Add('   AND a.dae_cd = ''910''                                                  ');
            qr_caatb901.SQL.Add(' GROUP BY a.gub_cd, a.nam, a.etc                                           ');
            qr_caatb901.ParamByName('SAW_CD').AsString := ed_sawcd.Text;
            qr_caatb901.Params[0].DataType := ftstring;
            qr_caatb901.Open;
        end
        else
        begin
            qr_caatb901.Close;
            qr_caatb901.SQL.Clear;
            qr_caatb901.SQL.Add(pv_sql);
            qr_caatb901.ParamByName('SAW_CD').AsString := ed_sawcd.Text;
            qr_caatb901.Params[0].DataType := ftstring;
            qr_caatb901.Open;
        end;

        if (rg_gub.ItemIndex = 0) then
        begin
            ed_etc.Text := '신규입사';
        end
        else
        begin
            ed_etc.Text := '';
        end;

        with qr_caatb416 do
        begin
            close;
            ParamByName('YMD').AsString := '';
            ParamByName('PAT_CD').ASString := '';
            ParamByName('SAW_CD').AsString := '';
            Open;
        end;

        panel29.Visible := true;
        top5_panel.Visible := true;
        top3_panel.Visible := true;

        new_top2.Visible := false;
        new_top1.Visible := false;
        top4_panel.Visible := false;

    end;

end;

procedure TCAAEF417.SpeedButton1Click(Sender: TObject);
begin
    inherited;
    DBGridEh3DblClick(nil);
end;

procedure TCAAEF417.SpeedButton2Click(Sender: TObject);
begin
    inherited;
    DBGridEh2DblClick(nil);
end;

procedure TCAAEF417.yyChange(Sender: TObject);
begin
    inherited;
    DoQuery(nil);
end;

end.
